Unidade 9 cap 17 navateh 
Introdução 
  Enfoque mais no projeto fisico 
  Se pensa na no armazenado de memoria tanto na primaria quanto na secundaria , por causa de tempo de execução e persistencia de dados ,respectivametne 
Organização dos dados 
    Os dados armazenados em discos são chamados de REGISTROS. São arquivos para cada linha  da tabela , para cada tupla 
    Para poupar tempo de execução, os registros sao armazenados em blocos para facilitar a busca de uma query 
    Os registros são tranferidos em blocos da memoria primaria para a secundaria 
    O fator de bloco é a quantidade de registros dentro de um bloco , normalmente proximo da trilha (para valores fisicos)
      o fator de bloco é associado a cada arquivo de tabela 
    Se os registros forem de tamanho variavel , usa-se uma media 
    Os arquivos sao carregados em um beffer na memoria 
    Os registros possuem metadados para mostrar o tamanho a ser utilizado do arquivo.
    Tipos de organização de arquivos 
      Heap 
        Os arquivos são gravados sem se preucupar com a ordenação . A cada registro de arquivo, é colocado no fim do arquivo 
      Sequencial 
        Os dados possuem uma determinada ordem, seguem uma sequencia com base no valor de um campo particular
      Hash 
        Tecninca usada onde a localzação do dado esa associada a uma chave , há um par ordenado chave valor 
        utiliza a função de randomização 
  Heap 
    Arquivo sem nnenhum criterio de ordem 
    Insert usa essa tecninca 
      Traz um bloco para a emmoria e grava no final, sem se preocupar com a ordem 
      muito eficiente por nao se preocupar com relação a ordem 
      traz o ultimo bloco, grava no final e devolve 
    Desvantagem 
      A busca de um registro dentro deste arquivo é o caos. a complexidade aumenta conforme o tamanho do arquivo por nao haver ordenação 
      Na hora de deletar um registro, o bloco onde esta o registro e levado para memoria, reescrito sem o registro desejadoe  jogado de volta para o disco. isso deixa os blocos cheios de furos, sendo necessario a reorganização dos arquivos de vez em quando 
        existe um metodo mais facil que e edeleçao logica. imagine que voce em cada registro , define-se um bit de controle que represenata se um registro esta ativo ou deletado. entao na hora de deletar um registro, ao inves de mexer na estrutura do bloco inteiro , so muda esse campo de controle, deletando de maneira logica . é mais efiociente por nao haver removimentação nos blocos . mas ainda nao elimina a necessidade de um reorganização a longo prazxo. alem disso , a reorganização se torna mais complicada por ter que analizar cada registro 
      Se for necessario que os arquivos sejam acessados a uma dada ordem, e necessario fazer uma reordeção desses arquivos 
  Arquivos ordenados ou sequencias 
    Existe uma preocupação na hora de gravar os blocos , ha uma certa preocupação de se manter uma determinada ordem
    Há uma dada sequencia em um dado campo 
    a gravação segue essa ordem 
    Vantagem 
      Se desejar efetuar uma leitura sequencial , a eficiencia e muito boa por que os dados ja estao ordenados. a leitura  emuito eficiente 
      A leitura randomica (pesquisa com chave que seja outro campo alem do de ordenação)  é eficiente por meio de pesquisa binaria, metodo de newton (complexidade logaritmica )
    O insert é um pouco mais tenso , por que deve haver uma pesquisa dentro dos blocos para colocar o regitro no lugar certo. Altas chances de regravação de blocos 
    Exclusão tambem nao sera tao eficiente por que gerara buracos e havera regravacao dos blocos de maneira periodica para ajustar os blocos
  Arquivos Hash 
    O acesso e praticamente imediato 
    tambem chamados de arquivos diretos 
    hash interno e quando esta sendo usado na memoria principal 
      pode se miontar uma tabela hash na emmoria principal para melhorar o desempenho 
    organizacao de arquivos e chamado de hash externo 
    complexidade constaten 
    Desvantagem 
      Gasta mais memoria onde quer sque seja empregada, na memoria principal ou em disco.
    Hash interno (tabela de dispersão)
      Trabnalha na area de memoria 
      Conceito de array assossiativo 
        Cada posição do array é correspondente ao valor da chave, que evita processamento. 
        o preço que se paga é a quantidade de memoria 
        se a chave nao for numerica, tera de ser feito uma funcao de mapeamento 
        mas para casos gigantes nao vale a pena gerar um array tao grande. Como proceder?
          Hash tables ou mapeamento
            Hash funtion ou função de randomização 
              um funcção que determina através da chave e posição na memoria. 
              A chave e mapeada para uma determinada posica. mesmo conceito que o hash de memoria 
              Pode gerar problema de colisao pois duas chaves podem acabar sendo mapeadas para mesma posicao 
              ex: H(k)=K%N onde n é o tamnaho do array 
            tratamento de colisão 
              tecnica de encadeamento 
                a ideia é que cada poosição do array, ou da area de memoria, possua um conjuto de chaves associados a ela 
                ao inves de armazenar a chave em cada posicao da tabela sera armazenado um POINTER.
                  pointer que aponta para o conjunto de chaves que participaram da colisão . esse conjubto irá crescendo conforme o processamento da tabela. o pointer armazenado é chamado de head, que aponta para o primeiro termo da lista que e cobeçalho . este termo possui o tamanho do lista e o pnteiro para o proximo termo.
                  esse conjunto é uma lista ligada
                  listas encadeadas ou listas ligadas
                Em suma, há uma lista ligada associada a cada posição de memoria que possuiu colisão, sendo realizado uma busca dentro desta lista para busca de termo 
                quanto menor o tamanho do array prealcado, que e definido pela funcao hash, maiores as chances de haver uma colisão 
                ganha memória, perde processamento 
                Complexidade na hora de inserção: O(1)
                  isso aontece por que os novos termos são colocados no começo da lista, mantendo a complexidade baixa
                Agora a busca na tabela não é tão eficiente para realizar a busca, pois será necessário realizar uma varredura da lista ligada. a busca se torna complexidade O(n)
              enderaçamento aberto (rehashing ) ou encadeamento aaberto 
                Tambem conhecido como hashing interno 
                Usa a propria tabela hash para tratar elementos de colisão 
                As colisões são jogadas para os espaços vazios não utilizados na tabela 
                bagunça tudo
                complica na hora da busca
    Hash externo 
